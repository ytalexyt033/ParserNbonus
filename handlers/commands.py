from aiogram import Router, types
from aiogram.filters import Command
from aiogram.utils.markdown import hbold, hcode
from config.config import Config
from database.crud import AccountCRUD, get_db
from services.bonus_collector import BonusCollector
from datetime import datetime, timedelta
import logging
from typing import Optional

router = Router()

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥
START_MESSAGE = f"""
{hbold('ü§ñ LoliLand Bonus Bot')}

{hbold('üîê –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:')}
/newacc [–Ω–∏–∫] [–ø–∞—Ä–æ–ª—å] - –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
/dellacc [–Ω–∏–∫] - –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
/collect - –°–æ–±—Ä–∞—Ç—å –≤—Å–µ –±–æ–Ω—É—Å—ã
/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞

{hbold('üìä –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:')}
/bonus [–Ω–∏–∫] - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ–Ω—É—Å
/money [–Ω–∏–∫/all] - –ë–∞–ª–∞–Ω—Å
/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

{hbold('üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:')} {', '.join(map(str, Config.ADMIN_USER_IDS))}
"""

def check_access(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    async def wrapper(message: types.Message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º –µ—Å–ª–∏: –∞–¥–º–∏–Ω –ò–õ–ò —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π —á–∞—Ç
        if Config.is_trusted_user(user_id) or Config.is_allowed_chat(chat_id):
            return await func(message)
        
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!")
    return wrapper

@router.message(Command("start", "help"))
@check_access
async def send_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help"""
    await message.answer(
        text=START_MESSAGE,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.message(Command("newacc"))
@check_access
async def add_account(message: types.Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not Config.is_trusted_user(message.from_user.id):
        await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        return
    
    try:
        args = message.text.split()
        if len(args) != 3:
            await message.answer("‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç: /newacc [–Ω–∏–∫–Ω–µ–π–º] [–ø–∞—Ä–æ–ª—å]")
            return
            
        username, password = args[1], args[2]
        db = next(get_db())
        
        if AccountCRUD.get(db, username):
            await message.answer(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {hcode(username)} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
            
        AccountCRUD.create(db, username, password)
        await message.answer(
            text=f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {hcode(username)} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞")

@router.message(Command("dellacc"))
@check_access
async def delete_account(message: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not Config.is_trusted_user(message.from_user.id):
        await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        return
    
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç: /dellacc [–Ω–∏–∫–Ω–µ–π–º]")
            return
            
        username = args[1]
        db = next(get_db())
        
        if AccountCRUD.delete(db, username):
            await message.answer(
                text=f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {hcode(username)} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                text=f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {hcode(username)} –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                parse_mode="HTML"
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞")

@router.message(Command("collect"))
@check_access
async def collect_bonuses(message: types.Message):
    """–°–±–æ—Ä –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not Config.is_trusted_user(message.from_user.id):
        await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        return
    
    try:
        msg = await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –±–æ–Ω—É—Å–æ–≤...")
        collector = BonusCollector()
        db = next(get_db())
        accounts = AccountCRUD.get_all(db)
        
        success_count = 0
        for account in accounts:
            try:
                bonus, next_time, balance = await collector.process_account(
                    account.username, 
                    account.password
                )
                if bonus is not None:
                    AccountCRUD.update_balance(db, account.username, balance)
                    success_count += 1
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–ª—è {account.username}: {str(e)}")
        
        await msg.edit_text(
            text=f"‚úÖ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}/{len(accounts)}",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –±–æ–Ω—É—Å–æ–≤: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –±–æ–Ω—É—Å–æ–≤")

@router.message(Command("bonus"))
@check_access
async def check_bonus(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –±–æ–Ω—É—Å–∞"""
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç: /bonus [–Ω–∏–∫–Ω–µ–π–º]")
            return
            
        username = args[1]
        db = next(get_db())
        account = AccountCRUD.get(db, username)
        
        if not account:
            await message.answer(
                text=f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {hcode(username)} –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                parse_mode="HTML"
            )
            return
            
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –±–æ–Ω—É—Å–∞
        time_left = "3 —á–∞—Å–∞ 15 –º–∏–Ω—É—Ç"  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        await message.answer(
            text=f"‚è≥ –ë–æ–Ω—É—Å –¥–ª—è {hcode(username)} –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑: {hbold(time_left)}",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ–Ω—É—Å–∞: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–æ–Ω—É—Å–∞")

@router.message(Command("money"))
@check_access
async def check_balance(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞"""
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç: /money [–Ω–∏–∫–Ω–µ–π–º|all]")
            return
            
        target = args[1].lower()
        db = next(get_db())
        
        if target == "all":
            accounts = AccountCRUD.get_all(db)
            total = sum(acc.balance for acc in accounts)
            await message.answer(
                text=f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {hbold(total)} –º–æ–Ω–µ—Ç",
                parse_mode="HTML"
            )
        else:
            account = AccountCRUD.get(db, target)
            if account:
                await message.answer(
                    text=f"üíé –ë–∞–ª–∞–Ω—Å {hcode(target)}: {hbold(account.balance)} –º–æ–Ω–µ—Ç",
                    parse_mode="HTML"
                )
            else:
                await message.answer(
                    text=f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {hcode(target)} –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                    parse_mode="HTML"
                )
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞")